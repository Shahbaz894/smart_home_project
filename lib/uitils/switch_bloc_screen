import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../bloc/switch_bloc.dart';
import '../../bloc/switch_events.dart';
import '../../bloc/switch_state.dart';
import 'package:flutter/services.dart'; // For HapticFeedback

// ... other imports

// class SwitchBlocWidget extends StatelessWidget {
//   final DatabaseReference ledRef;
//   final bool switchState;
//
//   const SwitchBlocWidget({Key? key, required this.ledRef,required this.switchState}) : super(key: key);
//
//   @override
//   Widget build(BuildContext context) {
//
//     FirebaseDatabase.instance.reference().child('brightness');
//     final SwitchBloc switchBloc = BlocProvider.of<SwitchBloc>(context);
//
//
//     return Center(
//       child: BlocBuilder<SwitchBloc, SwitchState>(
//         builder: (context, state) {
//           state.switchValue1;
//           return Padding(
//             padding: const EdgeInsets.only(top: 20.0),
//             child: Column(
//               mainAxisAlignment: MainAxisAlignment.center,
//               children: [
//                 Text(
//                   'Switch is ${state.switchValue1 ? 'ON' : 'OFF'}',
//                   style: TextStyle(
//                       fontSize: 20,
//                       color: state.switchValue1 ? Colors.red : Colors.green),
//                 ),
//                 const SizedBox(height: 20),
//                 Container(
//                   height: 120,
//                   width: 70,
//                   decoration: BoxDecoration(
//                     borderRadius: BorderRadius.circular(130),
//                     color: Colors.green,
//                     border: Border.all(color: Colors.black),
//                   ),
//                   child: Column(
//                     children: [
//                       Icon(
//                         Icons.lightbulb,
//                         size: 50,
//                         color: state.switchValue1 ? Colors.red : Colors.yellow,
//                       ),
//                       Switch(
//                         value: state.switchValue1,
//                         onChanged: (newValue) {
//                           ledRef.set(newValue ? 1 : 0); // Update Firebase value
//                           context.read<SwitchBloc>().add(UpdateSwitch1Event(newSwitchValue1:switchState ));
//
//
//                         },
//                       ),
//                     ],
//                   ),
//                 ),
//
//
//
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// }
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../bloc/switch_bloc.dart';
import '../../bloc/switch_events.dart';
import '../../bloc/switch_state.dart';

class SwitchBlocWidget extends StatelessWidget {
  final DatabaseReference ledRef;
  final int switchNumber; // 1 or 2 for identifying the switch

  const SwitchBlocWidget({Key? key, required this.ledRef, required this.switchNumber})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    final SwitchBloc switchBloc = BlocProvider.of<SwitchBloc>(context);
    bool isPushButtonMode = false;

    return Center(
      child: BlocBuilder<SwitchBloc, SwitchState>(
        builder: (context, state) {
          // bool currentSwitchValue = switchNumber == 1 ? state.switchValue1 : state.switchValue2;
          bool currentSwitchValue;

          switch (switchNumber) {
            case 1:
              currentSwitchValue = state.switchValue1;
              break;
            case 2:
              currentSwitchValue = state.switchValue2;
              break;
            case 3:
              currentSwitchValue = state.switchValue3; // Assuming you've added switchValue3 in the state
              break;
            case 4:
              currentSwitchValue = state.switchValue4; // Assuming you've added switchValue4 in the state
              break;
            default:
              currentSwitchValue = false; // Handle any unexpected switch numbers
          }

          return Padding(
            padding: const EdgeInsets.only(top: 20.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  'Switch ${switchNumber} is ${currentSwitchValue ? 'ON' : 'OFF'}',
                  style: TextStyle(
                      fontSize: 20,
                      color: currentSwitchValue ? Colors.red : Colors.green),
                ),

                // Text(
                //   'Switch is ${currentSwitchValue ? 'ON' : 'OFF'}',
                //   style: TextStyle(
                //       fontSize: 20,
                //       color: currentSwitchValue ? Colors.red : Colors.green),
                // ),
                const SizedBox(height: 20),
                Container(
                  height: 120,
                  width: 70,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(130),
                    color: Colors.green,
                    border: Border.all(color: Colors.black),
                  ),
                  child: Column(
                    children: [
                      Icon(
                        Icons.lightbulb,
                        size: 50,
                        color: currentSwitchValue ? Colors.red : Colors.yellow,
                      ),
                      Switch(
                        value: currentSwitchValue,
                        onChanged: (newValue) {
                          ledRef.set(newValue ? 1 : 0); // Update Firebase value
                          if (switchNumber == 1) {
                            context.read<SwitchBloc>().add(UpdateSwitch1Event(newSwitchValue1: newValue));
                          } if (switchNumber == 2){
                            context.read<SwitchBloc>().add(UpdateSwitch2Event(newSwitchValue2: newValue));
                          }
                          if (switchNumber == 3){
                            context.read<SwitchBloc>().add(UpdateSwitch3Event(newSwitchValue3: newValue));
                          }
                          if (switchNumber == 4){
                            context.read<SwitchBloc>().add(UpdateSwitch4Event(newSwitchValue4: newValue));
                          }
                        },
                      ),

              ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}

